# Generate language-appropriate files for port assignments.
import collections
import sys

Assignment = collections.namedtuple('PortAssignment',
                                    ['name', 'number', 'comment'])


# These rules should allow generating names that conform to
# language style guidelines.
# 1. Tokens inside a name should be separated by _.
# 2. Token inside a name should begin with a capital letter.
# 3. Initialisms such as UDP or TCP should be in all caps.

all_assignments = [
    ("operator station",
        [Assignment(
            "Operator_Gpsd_Listen", 6001,
            "Gpsd messages from vehicle gpsdrt to the operator."),
         Assignment(
            "Operator_Trajectory_Listen", 6002,
            "Bidi listener for trajectories and trajectory-applied messages."),
         Assignment(
            "Operator_G920_Listen", 6003,
            "Bidi listener for G920 HID reports."),
         Assignment(
            "Operator_G920_Trajectory", 7000,
            "G920 HID reports to trajectory planner. localhost"),
         Assignment(
            "Operator_Gpsd_Trajectory", 7001,
            "Gpsd messages from the gpsd listener to trajectory planner. localhost"),
         Assignment(
            "Operator_Trajectory_Request", 7002,
            "Trajectory messages from trajectory planner to trajectory listener for forwarding. localhost"),
         Assignment(
            "Operator_Trajectory_Request_Display", 7003,
            "Trajectory messages from trajectory planner to display. localhost"),
         Assignment(
            "Operator_Trajectory_Application", 7004,
            "Trajectory-applied messages from trajectory listener to display. localhost"),
         Assignment(
            "Operator_Overlay_Listen", 7777,
            "Overlay messages from decoder and gpsd listener to operator (display)."),
         Assignment(
            "Operator_Video_Listen", 8888,
            "Decoded video messages from decoder to operator (display)."),
         ]),

    ("vehicle",
        [Assignment(
            "Vehicle_Trajectory_Request_Application", 7000,
            "Trajectory requests from trajectory dialer to "
            "trajectory execution; trajectory-applied messages from trajectory execution "
            "to trajectory dialer for forwarding. localhost"),
         Assignment(
            "Vehicle_G920", 7001,
            "G920 reports to trajectory execution; heartbeats to keep bidi alive. "
            "localhost"),
         ]),
]


def main():
    with open("port.go", "w") as f:
        print("package net\n", file=f)
        print("// Generated by %s" % (sys.argv[0],), file=f)
        print("", file=f)
        for (tag, assignments) in all_assignments:
            print("//\n// %s\n//" % (tag,), file=f)
            for a in assignments:
                print("// %s" % (a.comment,), file=f)

                print("const %s = %d" % (a.name.replace("_", ""),
                                         a.number), file=f)
                print("", file=f)

    with open("port.py", "w") as f:
        print("# Generated by %s" % (sys.argv[0],), file=f)
        print("", file=f)
        for (tag, assignments) in all_assignments:
            print("\n# %s\n#" % (tag,), file=f)
            for a in assignments:
                print("# %s" % (a.comment,), file=f)
                print("%s = %d" % (a.name.upper(), a.number), file=f)
                print("", file=f)

    with open("port.h", "w") as f:
        print("#ifndef REMNAV_NET_PORTS_H_", file=f)
        print("#define  REMNAV_NET_PORTS_H_", file=f)
        print("// Generated by %s." % (sys.argv[0],), file=f)
        print("", file=f)
        for (tag, assignments) in all_assignments:
            print("\n// %s\n//" % (tag,), file=f)
            for a in assignments:
                print("// %s" % (a.comment,), file=f)
                print("const int32_t %s = %d;" % (a.name.upper(),
                                                  a.number), file=f)
                print("", file=f)
        print("#endif  // REMNAV_NET_PORTS_H_", file=f)


if __name__ == "__main__":
    main()
